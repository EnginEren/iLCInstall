Index: CMakeLists.txt
===================================================================
RCS file: /cvs/lcio/lcio/CMakeLists.txt,v
retrieving revision 1.44
diff -r1.44 CMakeLists.txt
22,24c22,24
< SET( ${PROJECT_NAME}_MAJOR_VERSION 1 )
< SET( ${PROJECT_NAME}_MINOR_VERSION 10 )
< SET( ${PROJECT_NAME}_PATCH_LEVEL 1 )
---
> SET( LCIO_MAJOR_VERSION 1 )
> SET( LCIO_MINOR_VERSION 10 )
> SET( LCIO_PATCH_LEVEL 1 )
27a28
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
44a46,72
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
> 
196,197c224
<     ADD_CUSTOM_TARGET( doc_cpp
<             DEPENDS "${PROJECT_SOURCE_DIR}/doc/doxygen_api/html" )
---
>     ADD_CUSTOM_TARGET( doc_cpp DEPENDS "${PROJECT_SOURCE_DIR}/doc/doxygen_api/html" )
229,230c256
<     ADD_CUSTOM_TARGET( doc_manual
<             DEPENDS "${PROJECT_SOURCE_DIR}/doc/manual.pdf" )
---
>     ADD_CUSTOM_TARGET( doc_manual DEPENDS "${PROJECT_SOURCE_DIR}/doc/manual.pdf" )
278,280c304
<     INSTALL( DIRECTORY "${PROJECT_SOURCE_DIR}/doc"
<             DESTINATION .
<             PATTERN "*CVS*" EXCLUDE )
---
>     INSTALL( DIRECTORY "${PROJECT_SOURCE_DIR}/doc" DESTINATION . PATTERN "*CVS*" EXCLUDE )
286,289c310,311
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
---
> SET( LCIO_SOVERSION "${LCIO_MAJOR_VERSION}.${LCIO_MINOR_VERSION}" )
> SET( LCIO_VERSION "${LCIO_SOVERSION}.${LCIO_PATCH_LEVEL}" )
305,309c327,329
< # output directories
< SET( EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin" CACHE PATH
<     "EXECUTABLE_OUTPUT_PATH" FORCE )
< SET( LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib" CACHE PATH
<     "LIBRARY_OUTPUT_PATH" FORCE )
---
> # build output directories
> SET( EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin" CACHE PATH "EXECUTABLE_OUTPUT_PATH" FORCE )
> SET( LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib" CACHE PATH "LIBRARY_OUTPUT_PATH" FORCE )
312,349d331
< # DEPENDENCIES: this code has to be placed before adding any library or
< # executable so that these are linked properly against the dependencies
< #IF( DEFINED ${PROJECT_NAME}_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
< #    # load macro
< #    IF( NOT EXISTS "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
< #        MESSAGE( FATAL_ERROR
< #            "\nSorry, could not find MacroCheckDeps.cmake...\n"
< #            "Please set CMAKE_MODULE_PATH correctly with: "
< #            "cmake -DCMAKE_MODULE_PATH=<path_to_cmake_modules>" )
< #    ENDIF()
< #    INCLUDE( "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
< #    CHECK_DEPS()
< #ENDIF()
< 
< # This code would not be necessary if the DEPENDENCIES code above would not
< # be commented out, but this way LCIO does not depend on CMakeModules
< IF( DEFINED BUILD_WITH AND BUILD_WITH STREQUAL "CLHEP" )
<   MESSAGE( STATUS " --- LCIO no longer (optionally) depends on CLHEP =>  BUILD_WITH \"CLHEP\" ignored !"  )
< 
< #    IF( NOT DEFINED CLHEP_HOME )
< #        MESSAGE( FATAL_ERROR "Check for CLHEP: CLHEP_HOME not set!! "
< #            "Please call cmake with -DCLHEP_HOME=<path_to_CLHEP>" )
< #    ENDIF()
< #    MESSAGE( STATUS "Check for CLHEP: ${CLHEP_HOME}" )
< #    INCLUDE( FindCLHEP.cmake )
< #
< #    IF( CLHEP_FOUND )
< #        INCLUDE_DIRECTORIES( ${CLHEP_INCLUDE_DIR} )
< #        LINK_LIBRARIES( ${CLHEP_LIBRARIES} )
< #        ADD_DEFINITIONS( ${CLHEP_DEFINITIONS} )
< #        SEPARATE_ARGUMENTS( CLHEP_DEFINITIONS )
< #        LIST( APPEND ${PROJECT_NAME}_DEFINITIONS ${CLHEP_DEFINITIONS} )
< #    ENDIF()
< 
< #    SET( BUILD_WITH "${BUILD_WITH}" CACHE STRING
< #        "Build ${PROJECT_NAME} with these optional packages" FORCE )
< ENDIF()
< 
357c339,340
<   LINK_LIBRARIES( ${DCAP_HOME}/lib/libdcap.so ) 
---
>   FIND_LIBRARY( DCAP_LIB NAMES dcap PATHS ${DCAP_HOME}/lib NO_DEFAULT_PATH )
>   LINK_LIBRARIES( ${DCAP_LIB} ) 
375,377c358,359
< LIST( APPEND ${PROJECT_NAME}_DEFINITIONS "-Wno-long-long" )
< CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/LCIOConfig.cmake.in"
>                 "${PROJECT_BINARY_DIR}/LCIOConfig.cmake" @ONLY )
380,381c362
< INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
<         DESTINATION . )
---
> INSTALL( FILES "${PROJECT_BINARY_DIR}/LCIOConfig.cmake" DESTINATION . )
389c370,372
< MESSAGE( STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}" )
---
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
405c388
<     "Where to install ${PROJECT_NAME}" FORCE )
---
>     "Where to install LCIO" FORCE )
408,409d390
< SET( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" CACHE PATH
<     "Path to custom CMake Modules" FORCE )
418,419c399,400
< SET( DCAP_HOME "${DCAP_HOME}" CACHE BOOL
<     "Set to dcap installation directory - only if BUILD_WITH_DCAP=true" FORCE )
---
> SET( DCAP_HOME "${DCAP_HOME}" CACHE PATH
>     "Set to dcap installation directory - only if BUILD_WITH_DCAP=ON" FORCE )
427c408,409
< CMAKE_EXPORT_BUILD_SETTINGS( "${PROJECT_NAME}BuildSettings.cmake" )
---
> CMAKE_EXPORT_BUILD_SETTINGS( "LCIOBuildSettings.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/LCIOBuildSettings.cmake" DESTINATION lib/cmake )
430c412,413
< EXPORT_LIBRARY_DEPENDENCIES( "${PROJECT_NAME}LibDeps.cmake" )
---
> EXPORT_LIBRARY_DEPENDENCIES( "LCIOLibDeps.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/LCIOLibDeps.cmake" DESTINATION lib/cmake )
