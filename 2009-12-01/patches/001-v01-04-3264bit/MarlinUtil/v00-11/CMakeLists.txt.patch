Index: CMakeLists.txt
===================================================================
RCS file: /marlinreco/MarlinUtil/CMakeLists.txt,v
retrieving revision 1.24
diff -r1.24 CMakeLists.txt
27,29c27,29
< SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
< SET( ${PROJECT_NAME}_MINOR_VERSION 11 )
< SET( ${PROJECT_NAME}_PATCH_LEVEL 0 )
---
> SET( MarlinUtil_MAJOR_VERSION 0 )
> SET( MarlinUtil_MINOR_VERSION 11 )
> SET( MarlinUtil_PATCH_LEVEL 0 )
36c36
< OPTION( BUILD_TESTJOBS "Set to ON to build MarlinUtil testjobs" OFF )
---
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
40,41c40
< # e.g. SET( ${PROJECT_NAME}_DEPENDS "Marlin MarlinUtil LCIO GEAR CLHEP GSL RAIDA" )
< SET( ${PROJECT_NAME}_DEPENDS "Marlin GEAR LCIO CLHEP GSL CED" )
---
> SET( MarlinUtil_DEPENDS "Marlin GEAR LCIO CLHEP GSL CED" )
53a53,78
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
72,76c97,98
< # add debug definitions
< #IF( CMAKE_BUILD_TYPE STREQUAL "Debug" OR
< #    CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" )
< #    ADD_DEFINITIONS( "-DDEBUG" )
< #ENDIF()
---
> #----- need long long for int64 for now ------
> ADD_DEFINITIONS( "-Wno-long-long" )
85,89c107,108
< # testjobs: list of all sources from which you want to create a binary
< SET( binary_sources "src/testmarlinutil.cc" )
< 
< # filter out binary sources from the library sources
< LIST( REMOVE_ITEM library_sources ${binary_sources} )
---
> # filter out testmarlinutil from the library sources
> LIST( REMOVE_ITEM library_sources "src/testmarlinutil.cc" )
131,134c150,151
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
---
> SET( MarlinUtil_SOVERSION "${MarlinUtil_MAJOR_VERSION}.${MarlinUtil_MINOR_VERSION}" )
> SET( MarlinUtil_VERSION "${MarlinUtil_SOVERSION}.${MarlinUtil_PATCH_LEVEL}" )
159c176
< IF( DEFINED ${PROJECT_NAME}_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
---
> IF( DEFINED MarlinUtil_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
169,175d185
< #------------------ CED -------------------
< #LOAD_PACKAGE( CED REQUIRED )
< #INCLUDE_DIRECTORIES( ${CED_INCLUDE_DIRS} )
< #LINK_LIBRARIES( ${CED_LIBRARIES} )
< #-------------------------------------
< 
< 
177c187
< ADD_LIBRARY( lib_${PROJECT_NAME} ${library_sources} )
---
> ADD_LIBRARY( lib_MarlinUtil ${library_sources} )
179c189
< ADD_CUSTOM_TARGET( lib DEPENDS lib_${PROJECT_NAME} )
---
> ADD_CUSTOM_TARGET( lib DEPENDS lib_MarlinUtil )
181c191
< SET_TARGET_PROPERTIES( lib_${PROJECT_NAME} PROPERTIES
---
> SET_TARGET_PROPERTIES( lib_MarlinUtil PROPERTIES
183,184c193,194
<     VERSION ${${PROJECT_NAME}_VERSION}
<     SOVERSION ${${PROJECT_NAME}_SOVERSION}
---
>     VERSION ${MarlinUtil_VERSION}
>     SOVERSION ${MarlinUtil_SOVERSION}
188c198
<     OUTPUT_NAME ${PROJECT_NAME} )
---
>     OUTPUT_NAME MarlinUtil )
191c201
< INSTALL( TARGETS lib_${PROJECT_NAME} DESTINATION lib PERMISSIONS
---
> INSTALL( TARGETS lib_MarlinUtil DESTINATION lib PERMISSIONS
196,217c206,208
< # BINARIES
< IF( BUILD_TESTJOBS )
<     # create symbolic bin target for calling targets bin_XXX
<     ADD_CUSTOM_TARGET( bin )
<    
<     # loop through list of binaries
<     FOREACH( src ${binary_sources} )
<         # create bin_name and bin_target (remove path and extension from files)
<         STRING( REGEX REPLACE ".*\\/(.+)\\..+$" "bin_\\1" bin_target "${src}" )
<         STRING( REGEX REPLACE ".*\\/(.+)\\..+$" "\\1" bin_name "${src}" )
<         # create target for binary
<         ADD_EXECUTABLE( ${bin_target} EXCLUDE_FROM_ALL ${src} )
<         # tell bin target to call this bin_XXX target
<         ADD_DEPENDENCIES( bin ${bin_target} )
<         # avoid conflicts between library and binary target names
<         SET_TARGET_PROPERTIES( ${bin_target} PROPERTIES OUTPUT_NAME ${bin_name} )
<         # link against project library
<         TARGET_LINK_LIBRARIES( ${bin_target} lib_${PROJECT_NAME} )
<         # install binary commando
<         INSTALL( TARGETS ${bin_target} DESTINATION bin )
<     ENDFOREACH()
< ENDIF()
---
> # MarlinUtil testjob
> ADD_EXECUTABLE( testmarlinutil EXCLUDE_FROM_ALL "src/testmarlinutil.cc" )
> TARGET_LINK_LIBRARIES( testmarlinutil lib_MarlinUtil )
225,226c216
< ADD_CUSTOM_TARGET( uninstall
<   "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
---
> ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
229,230c219,220
< CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/MarlinUtilConfig.cmake.in"
>                 "${PROJECT_BINARY_DIR}/MarlinUtilConfig.cmake" @ONLY )
233c223
< INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
---
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinUtilConfig.cmake" DESTINATION . )
242,244c232,235
< MESSAGE( STATUS "${PROJECT_NAME}_DEPENDS = \"${${PROJECT_NAME}_DEPENDS}\"" )
< MESSAGE( STATUS "BUILD_WITH = \"${BUILD_WITH}\"" )
< MESSAGE( STATUS "BUILD_TESTJOBS = ${BUILD_TESTJOBS}" )
---
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
> MESSAGE( STATUS "MarlinUtil_DEPENDS = \"${MarlinUtil_DEPENDS}\"" )
245a237
> MESSAGE( STATUS "BUILD_WITH = \"${BUILD_WITH}\"" )
255c247
<     "Where to install ${PROJECT_NAME}" FORCE )
---
>     "Where to install MarlinUtil" FORCE )
260,261d251
< SET( BUILD_TESTJOBS "${BUILD_TESTJOBS}" CACHE BOOL
<     "Set to ON to build MarlinUtil testjobs" FORCE )
267c257,258
< CMAKE_EXPORT_BUILD_SETTINGS( "${PROJECT_NAME}BuildSettings.cmake" )
---
> CMAKE_EXPORT_BUILD_SETTINGS( "MarlinUtilBuildSettings.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinUtilBuildSettings.cmake" DESTINATION lib/cmake )
270,271c261,262
< EXPORT_LIBRARY_DEPENDENCIES( "${PROJECT_NAME}LibDeps.cmake" )
< 
---
> EXPORT_LIBRARY_DEPENDENCIES( "MarlinUtilLibDeps.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinUtilLibDeps.cmake" DESTINATION lib/cmake )
