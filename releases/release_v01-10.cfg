##############################################################################
#
# Configuration file for installing ILC Software release v01-10
#
# This cfg file assumes the base-level tools from release_v01-10-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_v01-09-base.cfg or alternatively
# install all software with release_v01-09-scratch.cfg (please check
# release_v01-09-base.cfg for more details)
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

# check if we are on 32 or 64 bit
import os, sys, platform
arch = platform.architecture()[0]

ilcsoft_rel_version = 'v01-10-pre'

# set path automatically based on the platform being 32 or 64 bit
ilcsoft_afs_path={}
ilcsoft_afs_path['base']   = '/afs/desy.de/project/ilcsoft/sw'
ilcsoft_afs_path['32bit'] = os.path.normpath( os.path.join( ilcsoft_afs_path['base'] , 'i386_gcc34_sl4'   ))
ilcsoft_afs_path['64bit'] = os.path.normpath( os.path.join( ilcsoft_afs_path['base'] , 'x86_64_gcc41_sl5' ))
ilcsoft_afs_path[ ilcsoft_rel_version ] = os.path.normpath( os.path.join( ilcsoft_afs_path[ arch ] , ilcsoft_rel_version ))
print '+ ilcsoft installation path on afs:', ilcsoft_afs_path[ ilcsoft_rel_version ]

# installation directory
ilcsoft_install_path = ilcsoft_afs_path[ ilcsoft_rel_version ] # installation directory (different for 32 / 64 bit )
# uncomment the following to define a custom install path
# ilcsoft_install_path = '/scratch/ilcsoft'

ilcsoft = ILCSoft( ilcsoft_install_path )


# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL4 or SL5)
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
ilcPath = ilcsoft_afs_path[ arch ] + '/' # auto-detect correct path for 32/64 bit


# global options
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
if( ilcsoft.os.isSL(4) ):
    ilcsoft.env["FC"]="g77"

#--------- uncomment the following to build 32-bit mode on 64bit machines---
# default is now 64bit-native build
# (note: you need a 64-bit version of cernlib pre-installed ) 
#
#ilcsoft.env["CXXFLAGS"]="-m32"
#ilcsoft.env["CFLAGS"]="-m32"
#ilcsoft.env["FFLAGS"]="-m32"
#ilcsoft.env["LDFLAGS"]="-m32"

#--------- set to 'OFF' to build 64-bit natively -------
ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="OFF"
#----------------------------------------------------------------

ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"
ilcsoft.downloadType = "svn"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


###########################################################

ilcsoft.install( LCCD( "v01-00" ))

ilcsoft.install( Marlin( "v00-12" ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1 

ilcsoft.install( MarlinUtil( "v01-00" ))


ilcsoft.install( Mokka( "mokka-07-04" ))

#----------  standard reco packages

ilcsoft.install( MarlinReco( "v00-18-02" )) 


ilcsoft.install( PandoraPFA( "v03-02-01" ))
ilcsoft.install( PandoraPFANew("v00-02") )
ilcsoft.install( MarlinPandora("v00-01") )


ilcsoft.install( LCFIVertex( "v00-03-01" ))

ilcsoft.install( CEDViewer( "v01-00" )) 

ilcsoft.install( Overlay( "v00-07-03" ))  


#---------test beam packages 

ilcsoft.install( Eutelescope( "v00-02-02" ))    

ilcsoft.install( MarlinTPC( "v00-05-02" ))  

ilcsoft.install( SiliconDigi( "v00-04-02" ))

ilcsoft.install( Druid( "1.5" ))



ilcsoft.install( RAIDA( "v01-04-04" ))
ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/CondDBMySQL_ILC-0-8-1" ))


####################################################################
#
# - the following tools are installed in afs for SL4 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc34_sl4/
#
#
# - and for SL5 (64bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5
#
# they can be linked from there or need to be installed on your system
#
####################################################################


#----- configs ------------------------------------------------------
ilcsoft.link( ConfigPKG( "StandardConfig", ilcPath + "StandardConfig/v02-01" ) )
stdconf = ilcsoft.module( "StandardConfig")
stdconf.env["STANDARDCONFIG"]=stdconf.installPath

ilcsoft.link( ConfigPKG( "MokkaDBConfig", ilcPath + "MokkaDBConfig/v02-01" ) ) 
mokkadbconf = ilcsoft.module( "MokkaDBConfig")
mokkadbconf.download.root = "ilctools"
mokkadbconf.envorder=["MOKKADBCONFIG"]
mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )

ilcsoft.link( ConfigPKG( "LCFI_MokkaBasedNets", ilcPath + "LCFI_MokkaBasedNets/v00-01" ) )
lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
lcfinets.download.root = "tagnet"
lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath
#--------------------------------------------------------------------

ilcsoft.link( CED( ilcPath+"CED/v01-00" ))
ilcsoft.link( GEAR( ilcPath+"gear/v00-14-02" ))


ilcsoft.link( LCIO( ilcPath+"lcio/v01-51" ))


ilcsoft.link( dcap( ilcPath + "dcap/1.9.5-5" ))


ilcsoft.link( ROOT( ilcPath + "root/5.26.00b" ))

ilcsoft.link( CLHEP( ilcPath + "CLHEP/2.0.4.2" ))
ilcsoft.link( GSL( ilcPath + "gsl/1.8" ))
ilcsoft.link( MySQL( ilcPath + "mysql/5.0.45" ))
ilcsoft.link( CERNLIB( ilcPath + "cernlib/2006" ))
ilcsoft.link( QT( ilcPath + "QT/4.2.2" ))

# geant4
ilcsoft.use( Geant4 ( ilcPath + "geant4/9.2" ))
ilcsoft.module("Geant4").env["G4ENV_INIT"] = ilcPath + "geant4/env_9.2.sh"

# Java
if( ilcsoft.os.isSL(4) ):
    ilcsoft.link( Java( ilcPath + "java/1.6.0" ))

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/2.6.2" ))
ilcsoft.link( CMakeModules( ilcPath+"CMakeModules/v01-10-pre" ))

# end of configuration file

