##############################################################################
#
# Configuration file for installing ILC Software release v01-14
#
# This cfg file assumes the base-level tools from release_v01-14-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_v01-14-base.cfg or alternatively
# install all software with release_v01-14-scratch.cfg (please check
# release_v01-14-base.cfg for more details)
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions.py" )
execfile( versions_file )

print "Do we install nightlies? ", nightlies

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )
ilcsoft = ILCSoft( ilcsoft_install_dir )

# configuration for nightlies
if (nightlies==True):
    ilcsoft_install_dir = ilcsoft = ILCSoft("/scratch/nbuilds/"+date_iso8601)
    ilcsoft.nightlyBuild=True
    ilcsoft.nightlyTargets=['NightlyStart', 'NightlyConfigure', 'NightlyBuild', 'install', 'NightlyTest', 'NightlySubmit']


#print "ilcsoft install dir %s " %ilcsoft_install_dir

# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# --- set in release-versions.py ---
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
#ilcPath = '/afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/'
if not 'ilcPath' in dir():
    raise "ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
if not ncores:
   ncores = 4

ilcsoft.env["MAKEOPTS"]="-j" + str(ncores)
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
#
# Set it to false as ilcutil by default set it to ON.
# In this case USE_CXX11 overrides the CMAKE_CXX_STANDARD
ilcsoft.envcmake['USE_CXX11']=False
ilcsoft.envcmake['CMAKE_CXX_STANDARD']=cxx_standard
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'
#

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Release"

ilcsoft.downloadType = "GitHub"
#ilcsoft.downloadType = "svn-desy"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


###########################################################


#ilcsoft.link( LCIO( ilcPath + "lcio/" + LCIO_version ))
ilcsoft.install( LCIO( LCIO_version ))

#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
#ilcsoft.module("LCIO").envcmake['INSTALL_DOC']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"
# it is recommended to use the LD_PRELOAD mechanism for opening lcio files in dCache
#ilcsoft.link( dcap( ilcPath + "dcap/" + dcap_version ))


ilcsoft.link( SIO( ilcPath + "sio/" + SIO_version ))
ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))

ilcsoft.link( ROOT( ilcPath + "root/" + ROOT_version ))

ilcsoft.link( CLHEP( ilcPath + "CLHEP/" + CLHEP_version ))
ilcsoft.link( GSL( ilcPath + "gsl/" + GSL_version ))
ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/" + CondDBMySQL_version ))

# mysql
if 'MySQL_path' in dir():
    ilcsoft.use( MySQL( MySQL_path ))

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

ilcsoft.link( ILCUTIL( ilcPath + "ilcutil/" + ILCUTIL_version ))

ilcsoft.link( Boost( ilcPath + "boost/" + Boost_version ))

ilcsoft.link( Eigen( ilcPath + "eigen/" + Eigen_version ))

# end of configuration file

