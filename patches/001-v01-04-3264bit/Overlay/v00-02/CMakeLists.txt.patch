Index: CMakeLists.txt
===================================================================
RCS file: /marlin/Overlay/CMakeLists.txt,v
retrieving revision 1.3
diff -r1.3 CMakeLists.txt
35a36
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
50c51
<     SET( CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}" )
---
>     SET( CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}" )
52a54,79
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
57c84
< INCLUDE_DIRECTORIES( "${CMAKE_SOURCE_DIR}/include" )
---
> INCLUDE_DIRECTORIES( "${PROJECT_SOURCE_DIR}/include" )
60c87
< INSTALL( DIRECTORY "${CMAKE_SOURCE_DIR}/include"
---
> INSTALL( DIRECTORY "${PROJECT_SOURCE_DIR}/include"
70a98,100
> #----- need long long for int64 for now ------
> ADD_DEFINITIONS( "-Wno-long-long" )
> 
86c116
<         OUTPUT  "${CMAKE_SOURCE_DIR}/doc/html"
---
>         OUTPUT  "${PROJECT_SOURCE_DIR}/doc/html"
88c118
<         WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/doc"
---
>         WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/doc"
94c124
<         "${CMAKE_SOURCE_DIR}/doc/html" )
---
>         "${PROJECT_SOURCE_DIR}/doc/html" )
106c136
<     INSTALL( CODE "EXEC_PROGRAM(${CMAKE_BUILD_TOOL} ${CMAKE_BINARY_DIR} ARGS doc)" )
---
>     INSTALL( CODE "EXEC_PROGRAM(${CMAKE_BUILD_TOOL} ${PROJECT_BINARY_DIR} ARGS doc)" )
108c138
<     INSTALL( DIRECTORY "${CMAKE_SOURCE_DIR}/doc"
---
>     INSTALL( DIRECTORY "${PROJECT_SOURCE_DIR}/doc"
120,123c150,151
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
---
> SET( ${PROJECT_NAME}_SOVERSION "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
> SET( ${PROJECT_NAME}_VERSION "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
134c162
< SET( EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin" CACHE PATH
---
> SET( EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}/bin" CACHE PATH
136c164
< SET( LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib" CACHE PATH
---
> SET( LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/lib" CACHE PATH
143,148c171,173
<     # load macro
<     IF( NOT EXISTS "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
<         MESSAGE( FATAL_ERROR
<             "\nSorry, could not find MacroCheckDeps.cmake...\n"
<             "Please set CMAKE_MODULE_PATH correctly with: "
<             "cmake -DCMAKE_MODULE_PATH=<path_to_cmake_modules>" )
---
>     IF( NOT DEFINED CMAKE_MODULE_PATH )
>         MESSAGE( FATAL_ERROR "CMAKE_MODULE_PATH not set! Set it with: "
>             "-DCMAKE_MODULE_PATH=\"/path_to_ilcsoft/CMakeModules\"" )
150c175,176
<     INCLUDE( "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
---
>     # load macro
>     INCLUDE( "MacroCheckDeps" )
175,176c201,202
< CONFIGURE_FILE( "${CMAKE_SOURCE_DIR}/cmake_uninstall.cmake.in"
<                 "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake"
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/cmake_uninstall.cmake.in"
>                 "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
180,181c206
< ADD_CUSTOM_TARGET( uninstall
<   "${CMAKE_COMMAND}" -P "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake" )
---
> ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
184,185c209,210
< CONFIGURE_FILE( "${CMAKE_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
>                 "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
188c213
< INSTALL( FILES "${CMAKE_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
---
> INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
196a222,224
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
219a248
> INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}BuildSettings.cmake" DESTINATION lib/cmake )
222a252
> INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}LibDeps.cmake" DESTINATION lib/cmake )
