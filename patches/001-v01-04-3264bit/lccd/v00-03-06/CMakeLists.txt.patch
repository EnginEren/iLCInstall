Index: CMakeLists.txt
===================================================================
RCS file: /lccd/lccd/CMakeLists.txt,v
retrieving revision 1.17
diff -r1.17 CMakeLists.txt
20,22c20,22
< SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
< SET( ${PROJECT_NAME}_MINOR_VERSION 3 )
< SET( ${PROJECT_NAME}_PATCH_LEVEL 6 )
---
> SET( LCCD_MAJOR_VERSION 0 )
> SET( LCCD_MINOR_VERSION 3 )
> SET( LCCD_PATCH_LEVEL 6 )
25a26
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
31c32
< SET( ${PROJECT_NAME}_DEPENDS "LCIO" )
---
> SET( LCCD_DEPENDS "LCIO" )
40c41
<     SET( CMAKE_INSTALL_PREFIX "${${PROJECT_NAME}_SOURCE_DIR}" )
---
>     SET( CMAKE_INSTALL_PREFIX "${LCCD_SOURCE_DIR}" )
42a44,69
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
47a75,88
> # omit warning about preprocessor definitions being escaped
> IF(COMMAND CMAKE_POLICY)
>     CMAKE_POLICY(SET CMP0005 OLD)
> ENDIF()
> 
> #----- need long long for int64 for now ------
> #FIXME: should establish wether we are on a 32bit or 64 bit machine ....
> ADD_DEFINITIONS( "-Wno-long-long" )
> ADD_DEFINITIONS( "-DLCCD_DB_INIT_DEFAULT=\\\"${LCCD_DB_INIT}\\\"" )
> 
> # library *nix style versioning
> SET( LCCD_SOVERSION "${LCCD_MAJOR_VERSION}.${LCCD_MINOR_VERSION}" )
> SET( LCCD_VERSION "${LCCD_SOVERSION}.${LCCD_PATCH_LEVEL}" )
> 
49,72c90,141
< FIND_PACKAGE( Doxygen )
< FIND_PACKAGE( LATEX )
< IF( DOXYGEN_FOUND AND LATEX_COMPILER AND MAKEINDEX_COMPILER )
<     
<     ADD_CUSTOM_COMMAND(
<         OUTPUT  "${${PROJECT_NAME}_SOURCE_DIR}/doc/html"
<         COMMAND "${DOXYGEN_EXECUTABLE}"
<         WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/doc"
<         COMMENT "Building API Documentation..."
<         VERBATIM )
<     
<     ADD_CUSTOM_TARGET( doc DEPENDS
<         "${${PROJECT_NAME}_SOURCE_DIR}/doc/html" )
<     
< ELSE()
<     IF( NOT DOXYGEN_FOUND )
<         MESSAGE( STATUS "Doxygen not found in your system!!" )
<     ENDIF()
<     IF( NOT LATEX_COMPILER OR NOT MAKEINDEX_COMPILER )
<         MESSAGE( STATUS "Latex not found in your system!!" )
<     ENDIF()
<     IF( INSTALL_DOC )
<         MESSAGE( STATUS "INSTALL_DOC forced to OFF" )
<         SET( INSTALL_DOC OFF )
---
> # code for *nix only!
> IF( UNIX )
>     # find shell
>     FIND_PROGRAM( SH
>       sh
>       ${CYGWIN_INSTALL_PATH}/bin
>       /bin
>       /usr/bin
>       /usr/local/bin
>       /sbin
>       # FIXME add path to MacOS here
>     )
>     MARK_AS_ADVANCED( SH )
> 
>     IF( SH )
>         # generate shell script for setting environment before running a command
>         MESSAGE( STATUS "Generating shell environment script..." )
>         FILE( WRITE "${PROJECT_BINARY_DIR}/script.sh"
>                     "export LCCDVERSION=${LCCD_VERSION}\n"
>                     "$1 $2" )
> 
>         FIND_PACKAGE( Doxygen )
>         FIND_PACKAGE( LATEX )
>         IF( DOXYGEN_FOUND AND LATEX_COMPILER AND MAKEINDEX_COMPILER )
>             
>             ADD_CUSTOM_COMMAND(
>                 OUTPUT  "${LCCD_SOURCE_DIR}/doc/html"
>                 COMMAND ${SH} "${PROJECT_BINARY_DIR}/script.sh" "${DOXYGEN_EXECUTABLE}"
>                 WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}/doc"
>                 COMMENT "Building API Documentation..."
>                 VERBATIM )
>             
>             ADD_CUSTOM_TARGET( doc DEPENDS
>                 "${LCCD_SOURCE_DIR}/doc/html" )
>             
>         ELSE()
>             IF( NOT DOXYGEN_FOUND )
>                 MESSAGE( STATUS "Doxygen not found in your system!!" )
>             ENDIF()
>             IF( NOT LATEX_COMPILER OR NOT MAKEINDEX_COMPILER )
>                 MESSAGE( STATUS "Latex not found in your system!!" )
>             ENDIF()
>             IF( INSTALL_DOC )
>                 MESSAGE( STATUS "INSTALL_DOC forced to OFF" )
>                 SET( INSTALL_DOC OFF )
>             ENDIF()
>         ENDIF()
>     ELSE()
>         IF( INSTALL_DOC )
>             MESSAGE( STATUS "Unix Shell not found - INSTALL_DOC forced to OFF and doc target disabled!" )
>             SET( INSTALL_DOC OFF )
>         ENDIF()
78c147
<     INSTALL( CODE "EXEC_PROGRAM(${CMAKE_BUILD_TOOL} ${${PROJECT_NAME}_BINARY_DIR} ARGS doc)" )
---
>     INSTALL( CODE "EXEC_PROGRAM(${CMAKE_BUILD_TOOL} ${LCCD_BINARY_DIR} ARGS doc)" )
81c150
<     INSTALL( DIRECTORY "${${PROJECT_NAME}_SOURCE_DIR}/doc"
---
>     INSTALL( DIRECTORY "${LCCD_SOURCE_DIR}/doc"
88,93d156
< # library *nix style versioning
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
< 
109c172
< SET( EXECUTABLE_OUTPUT_PATH "${${PROJECT_NAME}_BINARY_DIR}/bin" CACHE PATH
---
> SET( EXECUTABLE_OUTPUT_PATH "${LCCD_BINARY_DIR}/bin" CACHE PATH
111c174
< SET( LIBRARY_OUTPUT_PATH "${${PROJECT_NAME}_BINARY_DIR}/lib" CACHE PATH
---
> SET( LIBRARY_OUTPUT_PATH "${LCCD_BINARY_DIR}/lib" CACHE PATH
117,123c180,183
< IF( DEFINED ${PROJECT_NAME}_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
<     # load macro
<     IF( NOT EXISTS "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
<         MESSAGE( FATAL_ERROR
<             "\nSorry, could not find MacroCheckDeps.cmake...\n"
<             "Please set CMAKE_MODULE_PATH correctly with: "
<             "cmake -DCMAKE_MODULE_PATH=<path_to_cmake_modules>" )
---
> IF( DEFINED LCCD_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
>     IF( NOT DEFINED CMAKE_MODULE_PATH )
>         MESSAGE( FATAL_ERROR "CMAKE_MODULE_PATH not set! Set it with: "
>             "-DCMAKE_MODULE_PATH=\"/path_to_ilcsoft/CMakeModules\"" )
125c185,186
<     INCLUDE( "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
---
>     # load macro
>     INCLUDE( "MacroCheckDeps" )
133,134c194,195
< CONFIGURE_FILE( "${CMAKE_SOURCE_DIR}/cmake_uninstall.cmake.in"
<                 "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake"
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/cmake_uninstall.cmake.in"
>                 "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
138c199
< ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" -P "${CMAKE_BINARY_DIR}/cmake_uninstall.cmake" )
---
> ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
141,142c202,203
< CONFIGURE_FILE( "${${PROJECT_NAME}_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${LCCD_SOURCE_DIR}/LCCDConfig.cmake.in"
>                 "${LCCD_BINARY_DIR}/LCCDConfig.cmake" @ONLY )
145c206
< INSTALL( FILES "${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
---
> INSTALL( FILES "${LCCD_BINARY_DIR}/LCCDConfig.cmake" DESTINATION . )
153a215,217
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
157a222
> MESSAGE( STATUS "BUILD_WITH = ${BUILD_WITH}" )
167c232
<     "Where to install ${PROJECT_NAME}" FORCE )
---
>     "Where to install LCCD" FORCE )
178c243
< SET( INSTALL_DOC "${BUILD_DOC}" CACHE BOOL
---
> SET( INSTALL_DOC "${INSTALL_DOC}" CACHE BOOL
183c248,249
< CMAKE_EXPORT_BUILD_SETTINGS( "${PROJECT_NAME}BuildSettings.cmake" )
---
> CMAKE_EXPORT_BUILD_SETTINGS( "LCCDBuildSettings.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/LCCDBuildSettings.cmake" DESTINATION lib/cmake )
186c252,253
< EXPORT_LIBRARY_DEPENDENCIES( "${PROJECT_NAME}LibDeps.cmake" )
---
> EXPORT_LIBRARY_DEPENDENCIES( "LCCDLibDeps.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/LCCDLibDeps.cmake" DESTINATION lib/cmake )
