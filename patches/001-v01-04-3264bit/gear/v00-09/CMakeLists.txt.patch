Index: CMakeLists.txt
===================================================================
RCS file: /gear/gear/CMakeLists.txt,v
retrieving revision 1.34
diff -r1.34 CMakeLists.txt
21,23c21,23
< SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
< SET( ${PROJECT_NAME}_MINOR_VERSION 9 )
< SET( ${PROJECT_NAME}_PATCH_LEVEL 0 )
---
> SET( GEAR_MAJOR_VERSION 0 )
> SET( GEAR_MINOR_VERSION 9 )
> SET( GEAR_PATCH_LEVEL 0 )
27c27
< OPTION( BUILD_GEAR_TESTS "Set to ON to build GEAR tests" OFF )
---
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
39a40,67
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
> 
> 
41,44c69,70
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
---
> SET( GEAR_SOVERSION "${GEAR_MAJOR_VERSION}.${GEAR_MINOR_VERSION}" )
> SET( GEAR_VERSION "${GEAR_SOVERSION}.${GEAR_PATCH_LEVEL}" )
124c150
<                     "export GEARVERSION=${${PROJECT_NAME}_VERSION}\n"
---
>                     "export GEARVERSION=${GEAR_VERSION}\n"
224,236c250,251
< # DEPENDENCIES: this code has to be placed before adding any library or
< # executable so that these are linked properly against the dependencies
< IF( DEFINED ${PROJECT_NAME}_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
<     # load macro
<     IF( NOT EXISTS "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
<         MESSAGE( FATAL_ERROR
<             "\nSorry, could not find MacroCheckDeps.cmake...\n"
<             "Please set CMAKE_MODULE_PATH correctly with: "
<             "cmake -DCMAKE_MODULE_PATH=<path_to_cmake_modules>" )
<     ENDIF()
<     INCLUDE( "${CMAKE_MODULE_PATH}/MacroCheckDeps.cmake" )
<     CHECK_DEPS()
< ENDIF()
---
> # create symbolic lib target for calling target lib_XXX
> ADD_CUSTOM_TARGET( lib )
238,243c253,255
< # input directories
< ADD_SUBDIRECTORY( src/cpp/gearxml gearxml )
< ADD_SUBDIRECTORY( src/cpp/gearimpl gear )
< IF( BUILD_GEAR_TESTS )
<     ADD_SUBDIRECTORY( src/cpp/test test )
< ENDIF()
---
> # FIXME: check for 32/64 bit
> ADD_DEFINITIONS( "-Wno-long-long" )
> ADD_DEFINITIONS( "-Wall -ansi -pedantic" )
245,250c257,262
< #--- add mergeXML to be build by default
< INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/src/cpp/include )
< ADD_EXECUTABLE( mergeXML src/cpp/test/mergeXML.cc )
< TARGET_LINK_LIBRARIES( mergeXML lib_GEAR lib_GEARXML )
< # install binary commando
< INSTALL( TARGETS mergeXML DESTINATION ${CMAKE_INSTALL_PREFIX}/bin )
---
> INCLUDE_DIRECTORIES( "src/cpp/include" )
> 
> # input directories
> ADD_SUBDIRECTORY( src/cpp/gearxml )
> ADD_SUBDIRECTORY( src/cpp/gearimpl )
> ADD_SUBDIRECTORY( src/cpp/test )
261,263c273,274
< LIST( APPEND GEAR_DEFINITIONS "-Wno-long-long;-DUSE_GEAR" )
< CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/GEARConfig.cmake.in"
>                 "${PROJECT_BINARY_DIR}/GEARConfig.cmake" @ONLY )
266c277
< INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
---
> INSTALL( FILES "${PROJECT_BINARY_DIR}/GEARConfig.cmake" DESTINATION . )
280,281c291,293
< MESSAGE( STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}" )
< MESSAGE( STATUS "BUILD_GEAR_TESTS = ${BUILD_GEAR_TESTS}" )
---
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
292c304
<     "Where to install ${PROJECT_NAME}" FORCE )
---
>     "Where to install GEAR" FORCE )
295,298d306
< SET( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" CACHE PATH
<     "Path to custom CMake Modules" FORCE )
< SET( BUILD_GEAR_TESTS "${BUILD_GEAR_TESTS}" CACHE BOOL
<     "Set to ON to build GEAR tests" FORCE )
304c312,313
< CMAKE_EXPORT_BUILD_SETTINGS( "${PROJECT_NAME}BuildSettings.cmake" )
---
> CMAKE_EXPORT_BUILD_SETTINGS( "GEARBuildSettings.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/GEARBuildSettings.cmake" DESTINATION lib/cmake )
307c316,317
< EXPORT_LIBRARY_DEPENDENCIES( "${PROJECT_NAME}LibDeps.cmake" )
---
> EXPORT_LIBRARY_DEPENDENCIES( "GEARLibDeps.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/GEARLibDeps.cmake" DESTINATION lib/cmake )
