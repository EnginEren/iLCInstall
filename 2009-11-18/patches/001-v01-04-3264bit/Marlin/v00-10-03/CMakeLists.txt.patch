Index: CMakeLists.txt
===================================================================
RCS file: /marlin/Marlin/CMakeLists.txt,v
retrieving revision 1.31
diff -r1.31 CMakeLists.txt
17a18,23
> # allow duplicate custom targets
> #SET_PROPERTY(GLOBAL PROPERTY ALLOW_DUPLICATE_CUSTOM_TARGETS TRUE)
> #IF(COMMAND CMAKE_POLICY)
> #    CMAKE_POLICY(SET CMP0002 OLD)
> #ENDIF()
> 
19,21c25,27
< SET( ${PROJECT_NAME}_MAJOR_VERSION 0 )
< SET( ${PROJECT_NAME}_MINOR_VERSION 10 )
< SET( ${PROJECT_NAME}_PATCH_LEVEL 3 )
---
> SET( Marlin_MAJOR_VERSION 0 )
> SET( Marlin_MINOR_VERSION 10 )
> SET( Marlin_PATCH_LEVEL 3 )
24a31
> OPTION( BUILD_32BIT_COMPATIBLE "Set to ON to build in 32 bit compatibility mode" ON )
29,30c36,37
< # project dependencies e.g. SET( ${PROJECT_NAME}_DEPENDS "LCIO;CLHEP" )
< SET( ${PROJECT_NAME}_DEPENDS "LCIO" )
---
> # project dependencies e.g. SET( Marlin_DEPENDS "LCIO;CLHEP" )
> SET( Marlin_DEPENDS "LCIO" )
42a50,76
> #---------------- 32/64 bit issues ---------------------------------------
> #INCLUDE( CheckTypeSize )
> #CHECK_TYPE_SIZE( "void*" SIZE_OF_VOID_P )
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 4 )
>     MESSAGE( STATUS "32 bit architecture detected" )
> ENDIF()
> 
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "64 bit architecture detected" )
> 
>     IF( BUILD_32BIT_COMPATIBLE )
>         IF( COMMAND SET_PROPERTY )
>             SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS 0)
>             SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32" )
>         ELSE()
>             MESSAGE( FATAL_ERROR "to build in 32 bit compatibility mode you need cmake >= 2.6" )
>         ENDIF()
>         MESSAGE( STATUS "Build in 32 bit compatibility mode" )
>     ELSE()
>         MESSAGE( STATUS "Build in native 64 bit mode" )
>     ENDIF()
> ENDIF()
> 
> #-------------------------------------------------------------------------
> 
> 
47d80
<     LIST( APPEND ${PROJECT_NAME}_DEFINITIONS "-DMARLINDEBUG" )
52d84
<     LIST( APPEND ${PROJECT_NAME}_DEFINITIONS "-DMARLIN_NO_DLL" )
54a87,89
> #----- need long long for int64 for now ------
> ADD_DEFINITIONS( "-Wno-long-long" )
> 
92,95c127,128
< SET( ${PROJECT_NAME}_SOVERSION
<     "${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}" )
< SET( ${PROJECT_NAME}_VERSION
<     "${${PROJECT_NAME}_SOVERSION}.${${PROJECT_NAME}_PATCH_LEVEL}" )
---
> SET( Marlin_SOVERSION "${Marlin_MAJOR_VERSION}.${Marlin_MINOR_VERSION}" )
> SET( Marlin_VERSION "${Marlin_SOVERSION}.${Marlin_PATCH_LEVEL}" )
120c153
< IF( DEFINED ${PROJECT_NAME}_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
---
> IF( DEFINED Marlin_DEPENDS OR DEFINED BUILD_WITH OR DEFINED LINK_WITH )
140,141c173
< ADD_CUSTOM_TARGET( uninstall
<   "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
---
> ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" )
144,145c176,177
< CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
<                 "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY )
---
> CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/MarlinConfig.cmake.in"
>                 "${PROJECT_BINARY_DIR}/MarlinConfig.cmake" @ONLY )
148c180
< INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )
---
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinConfig.cmake" DESTINATION . )
156a189,191
> IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
>     MESSAGE( STATUS "BUILD_32BIT_COMPATIBLE = ${BUILD_32BIT_COMPATIBLE}" )
> ENDIF()
159a195
> MESSAGE( STATUS "BUILD_WITH = ${BUILD_WITH}" )
169c205
<     "Where to install ${PROJECT_NAME}" FORCE )
---
>     "Where to install Marlin" FORCE )
183c219,220
< CMAKE_EXPORT_BUILD_SETTINGS( "${PROJECT_NAME}BuildSettings.cmake" )
---
> CMAKE_EXPORT_BUILD_SETTINGS( "MarlinBuildSettings.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinBuildSettings.cmake" DESTINATION lib/cmake )
186c223,224
< EXPORT_LIBRARY_DEPENDENCIES( "${PROJECT_NAME}LibDeps.cmake" )
---
> EXPORT_LIBRARY_DEPENDENCIES( "MarlinLibDeps.cmake" )
> INSTALL( FILES "${PROJECT_BINARY_DIR}/MarlinLibDeps.cmake" DESTINATION lib/cmake )
