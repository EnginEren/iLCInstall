#################################
#
#   iLCSoft release - v01-11
#
#################################

-------------------------------------------------------------------
afs reference installations - starting from  release v01-09:

  /afs/desy.de/project/ilcsoft/sw/

with subdirectories for different CPUs, operating systems and gcc versions.e.g:

 i386_gcc34_sl4        # i386 CPU, 32 bit, gcc3.4, SL4 and compatible
 i386_gcc41_sl5        # i386 CPU, 32 bit, gcc4.1, SL5 and compatible
 x86_64_gcc41_sl5      # i686 CPU, 64 bit, gcc4.1, SL5 and compatible

------------------------------------------------------------------


========================================

 New packages in iLCSoft added in v01-11

========================================


 ILCUTIL v00-01 :
        
        ILCUTIL is a new utility package for the iLCSoft software framework.

        This new package is intended to be a "meta-package" which packages together
        a set of independent utility packages living in separate sub-directories.

    Currently ILCUTIL contains the following sub-packages:

        - ILCSOFT_CMAKE_MODULES (Previously known as CMakeModules)
            This package contains a set of cmake modules and utility macros.
            Almost all iLCSoft packages depend on this sub-package for the
            cmake configure/build step.

        - ILCTEST
            This package provides utilities to help developers write new C++
            tests in their packages. It consists of a C++ utility header and
            a set of cmake macros (living inside ILCSOFT_CMAKE_MODULES) to
            facilitate adding new tests in a straight-forward manner.

        - streamlog
            This package provides a set of logging classes for C++ applications.


-------------------------------------------------
Release notes of packages that have been changed 
-------------------------------------------------


================================
 GEAR
================================

  --------
 | v00-17 |
  --------

     - made TGeo implementation of the detailed material properties a plugin,
       i.e. no dependence on ROOT, unless it is requested in the Gear file that TGeo should be used (tag <GDML>)

     - added old signature of addLayer for backwards compatibility (without layerRotation parameters introduced in v00-16)

     - renamed GearVersion.h to GearConfig.h (to include general purpose configuration definitions)

     - src/gearxml/SiPlanesParametersXML.cc: xmlSen to xmlLad change (bug fix)

     - removed deprecated GEAR_DEFINITIONS (-DUSE_GEAR) from GEARConfig.cmake

     - updated cmake files (now uses the new ILCUTIL package)



================================
 LCCD   
================================

 -----------
| v01-02    |
 -----------

        - added configuration header file LCCDConfig.h
            #defines or #undefines LCCD_CONDDBMYSQL (based on how LCCD was built)

        - removed old makefiles

        - updated cmake files (now uses the new ILCUTIL package):

            - simplified cmake files (cmake macros now live in sub-package ILCSOFT_CMAKE_MODULES from package ILCUTIL)

            - added LCCDConfigVersion.cmake to allow checking version of LCCD at cmake time, e.g.:
                FIND_PACKAGE( LCCD 1.2 ) # at least version 1.2

            - export of LCIO dependency done through LCCDConfig.cmake, i.e. other packages get LCIO_INCLUDE_DIRS and
                LCIO_LIBRARIES when building against LCCD, e.g.:

                    FIND_PACKAGE( LCCD 1.2 )
                    INCLUDE_DIRECTORIES( ${LCCD_INCLUDE_DIRS} )       # also includes ${LCIO_INCLUDE_DIRS}
                    TARGET_LINK_LIBRARIES( mylib ${LCCD_LIBRARIES} )  # also includes ${LCIO_LIBRARIES}

            - removed deprecated LCCD_DEFINITIONS (-DUSE_LCCD) from LCCDConfig.cmake

            - replaced options BUILD_LCCD_TESTS and BUILD_CONDDB_TESTS with option BUILD_TESTING
                If BUILD_TESTING is set to ON (default) tests are built with 'make'
                Otherwise tests are built separately with target 'make tests'
                (conddb tests are also built if LCCD is built with CondDBMySQL)

            - upgraded CMAKE_MINIMUM_REQUIRED to 2.6

        - fixed lcio::DataNotAvailableException bug in DataFileHandler

        - fixed forward declarations from CondDBMySQL



================================
 Marlin
================================

 --------
| v01-00 |
 --------

        - Added a global random seed for Marlin processors.
          This is used to provide individual pseudo-random numbers to Processors on
          an event-by-event and run-by-run basis. These may be used by Processors to
      seed their random number generator of choice. In order to use this service
      a Processor must register itself in the init method using:

                Global::EVENTSEEDER->registerProcessor(this);

          and should retrieve its allocated event seed during processEvent using:

                int eventSeed = Global::EVENTSEEDER->getSeed(this);

      and include the header file:

        #include "marlin/ProcessorEventSeeder.h"

          The global seed is used for a complete job and is set in the Global steering parameters thus:

                <parameter name="RandomSeed" value="1234567890"/>

          Note that the value must be a positive integer, with max value 2,147,483,647
          A pseudo-random event seed is generated using a three step hashing function of unsigned ints,
      in the following order: event_number, run_number, RandomSeed. The hashed int from each step
      in the above order is used as input to the next hash step. This is used to ensure that in
      the likely event of similar values of event_number, run_number and RandomSeed, different
      event seeds will be generated.

      The event seed is then used to seed rand via srand(seed) and then rand is used to
      generate one seed per registered processor.

      This mechanism ensures reproducible results for every event, regardless of the sequence
      in which the event is processed in a Marlin job, whilst maintaining the full 32bit range
      for event and run numbers.


        - allow RunHeaders to be modified in EventModifier interface
      (https://jira.slac.stanford.edu/browse/MAR-35)


    - added ./test directory with some initial marlin tests
          (use 'make test' to run the tests)

    - improved CMake files and build procedure  (now uses the new ILCUTIL package)

    - simplified examples/mymarlin  (now uses the new ILCUTIL package)

        - added MarlinConfig.h to include general purpose configuration definitions
        - removed deprecated build mode: MARLIN_NO_DLL



================================
 CED
================================

 --------
| v01-02 |
 --------

    New features (H. Hoelbe, DESY):
        - Remote access to CED:
            * Per default CED rejects connects from remote hosts, to
              enable remote access, start CED with option --trust <hostname>.

            * Example: To allow remote access from host xyz:
                   glced --trust xyz

        - Use user defined port:
            * To start ced several times on the same host, it is necessary
              that each instance of CED use a different port. To do that,
              you are able to set the CED port by set the enviroment
              variable CED_PORT.

            * Example: Start CED listen on port 8888:
                    export CED_PORT=8888
                    glced

            * Hint: To connect on this CED with Marlin you must set
              the enviroment variable CED_PORT (and for remote access
              also CED_HOST) before starting Marlin.

    Fixes/Intern stuff
        - Move (Middle mouse button):
               * Now works correct with rotate
               * Adjusted the move speed, to get the same speed for
                 each zoom level and window size.

        - rotate3d:
              * Helper function: rotates a vector in the 3d room

        - ced_geobox_r_ID:
              * do the same as ced_geobox_r (plus lcio_id) but use
                ced_line_ID, this ensure working picking, fisheye view and
                layerdescription. All other geobox functions ced_geobox_r,
                ced_geobox_ID, ced_geobox, now can use this new function
                instead of having own code.

    Simplified CMakeLists  (now uses the new ILCUTIL package)



================================
 CEDViewer
================================

 --------
| v01-02 |
 --------

 - cmake changes:
    - simplified CMakeLists.txt  (now uses the new ILCUTIL package)
    - improvements in dependency handling:
        - removed dependencies GEAR, LCIO and streamlog (now exported through Marlin)
        - removed dependencies CED and CLHEP (now exported thorough MarlinUtil)
        - removed dependency to GSL (not used anywhere in CEDViewer). Dependency was propagated
            from a "bug" in MarlinUtil header files ( #include <gsl/...> statements )
        - exchanged CMakeModules dependency with new package ILCUTIL

    - removed CEDViewerConfig.cmake.in
    - removed BuildSetup.cmake

 - removed old makefile
 - removed old steering file



================================
 MarlinUtil
================================

 --------
| v01-02 |
 --------

    - Changes (H. Hoelbe, DESY):
        - Implement remote access to CED:

            * Now you are able to connect to an user defined host and portnumber.

            * Example: To run CED on host "foo" port 7777 and Marlin on host "bar":
                      ssh foo
                      export CED_PORT="7777"
                      glced --trust bar

                      ssh bar
                      export CED_HOST="foo"
                      export CED_PORT="7777"
                      Marlin viewer.xml

    - Simplified cmake files (now uses the new ILCUTIL package)
        Improved dependencies:
            - removed dependencies GEAR, LCIO and streamlog (now exported through Marlin)
            - exchanged CMakeModules dependency with new package ILCUTIL


================================
 StandardConfig
================================

 .... in development ....



================================
 MarlinReco   
================================

 .... in development ....


================================
 Mokka
================================

 .... in development ....




================================
 MarlinPandora
================================

TAG V00-04 FOR ILCSOFT USAGE

Updated default path length to interaction length (and radiation length) conversion constants to CLIC_ILD_CDR values.
Updated CMake files to use new ILCUTIL package.
Updated CMake files to reflect restructuring of PandoraPFANew.
Updated standalone makefile to reflect restructuring of PandoraPFANew.
Made use of interfaces to pandora content libraries, allowing for quick registration of multiple algorithms and helper functions.
Added registration of FineGranularity PseudoLayerCalculator and ShowerProfileCalculator.
Changed references to "track state at ecal" to "track state at calorimeter".
Specified track (projected) time at calorimeter.
Used results of track fit to determine track direction in z.
Added new definition of reaches calorimeter for FTD tracks.
Allowed for different barrel/endcap ECalToHadGeV calibration constants.
Corrected cell unit vectors for HCal ring and other endcap-like detectors, located between the main barrels and endcaps.
Updated to reflect changes to GeometryHelper.
Made use of IsMirroredInZ subdetector parameter functionality.
Updated pandorasettings, adding new (and renaming existing) entries for particle id and energy correction functions.
Updated pandorasettings clustering parameters, specifying parameters for regions of fine or coarse granularity.
Updated steering file scripts to specify separate ECalToHadGeV calibration constants for barrel and endcap.



================================
 PandoraPFANew
================================

TAG V00-05 FOR ILCSOFT USAGE

Updated CMake files to use new ILCUTIL package.
Added CLICPfoSelection algorithm.
Added one and two dimensional histogram classes.
Restructured PandoraPFANew, dividing content into separate libraries for framework, fine granularity content and k-means clustering content.
Moved all content specific to fine granularity detectors from framework (e.g. helper classes) to fine granularity content library.
Updated CMake files to reflect restructuring of PandoraPFANew.
Updated standalone makefile to reflect restructuring of PandoraPFANew.
Added simple content registration options for FineGranularity and k-means content libraries.
Improved interface classes for BField, ShowerProfile and PseudoLayer calculators
Added ShowerProfileCalculator interface class and SetShowerProfileCalculator api.
Changed default values for shower profile start and discrepancy to float max.
Added ability to register IsEmShowerFast/Full helper functions.
Added RegisterSettingsFunction api for parsing custom, non-algorithm, xml snippets.
Improved xml configuration of helper classes and utility classes.
PandoraSettings and GeometryHelper are no longer singletons.
Added first implemetation of k-means clustering algorithm.
Added implementation of InwardClustering algorithm.
Implemented customisable hit type to granularity mapping, allowing specific references to ECal, HCal etc. to be removed from algorithms.
Renamed HighGranularityPseudoLayerCalculator to FineGranularityPseudoLayerCalculator, for consistency.
Added ClusterHelper::FitGeneralPoints function, removing specific barrel and endcap linear fits.
Improved exception handling for linear cluster fits.
Added FitLayerCentroids cluster helper function.
Tidied UpdateClusterProperties method in clustering algorithm.
Altered CartesianVector operator== to account for limited floating point accuracy.
Added fixed particle id functionality.
Added GetEnergyWeightedMeanTime cluster helper function.
Updated helix interface and usage of helix class in muon reconstruction algorithm.
Added inner detector parameters to GeometryHelper and PandoraApi.
Removed TRACK_PROJECTION_LAYER constant and replaced with PseudoLayerCalculator::GetPseudoLayerAtIp functionality.
Changed uninitialized behaviour of GeometryHelper::SubDetectorParameters class.
FinalParticleId algorithm now skips pfos already flagged as electrons or muons.
New api parameter: track time at calorimeter.
New api parameter: IsMirroredInZ subdetector parameter.
Renamed api parameter: "track state at ecal" parameters to "track state at calorimeter".
Addressed CppCheck (static analysis package) warnings.



================================
 LCFIVertex
================================

 --------
| v00-05 |
 --------

  * simplified cmake scripts (now uses the new ILCUTIL package )

  * bug fix for building documentation in SL5.5



================================
 Overlay
================================

 --------
| v00-09 |
 --------

     - minor modifications
        -- timing window start time set to small negative value
        -- simplified cmake files (now uses the new ILCUTIL package)



================================
 MarlinTPC
================================

  -----------
 | v00-08-04 |
  -----------

    updated build structure (cmake files)
    No code changes, only a simple patch release



================================
 RAIDA
================================

  -------
 | v01-06 |
  -------

    - fixed building of documentation
    - added RAIDAConfigVersion.cmake to check RAIDA version
    - updated cmake files to use new ILCUTIL package



================================
 ilcinstall
================================


  --------
 | v01-11 |
  --------

     - changed for using ILCUTIL package

     - added installation of EUDAQ+Millepede2 in Eutelescope
        activate with:
        ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
        ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'

     - deprecated CMakeModules, AIDAJNI and JAIDA packages

     - deprecated use of PKG_HOME cmake variables (now replaced with standard cmake PKG_DIR variables)


     + bug fixes included in v01-10-01:

        * ilcsoft/mokka.py: added unset G4VIS_USE_OIX (previously known as G4VIS_USE_OIX_DRIVER)

        * ilcsoft/geant4.py: added G4REALSURFACEDATA (new in 9.3)
        
        * ilcsoft/fastjet.py: patched for macosx



