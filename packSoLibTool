#! /usr/bin/python

#########################################
# Python script for packing a binary
# together with the needed run-time
# shared libraries into a tar ball
# @author Jan Engels, DESY
#########################################

import sys
import os.path
import commands
import shutil

# list of valid options
valid_opts=["i","e","s","t"]

# dictionary for storing options and their values
args={}

#=============================================================================
# function definitions
#-----------------------------------------------------------------------------

def printUsage():
    # display usage information
    print "\n USAGE:", sys.argv[0], "\"binary_file\" [options]"
    print
    print " options:"
    print "   -i[colon-separated list of libraries] to include in the tar file"
    print "   -e[colon-separated list of libraries] to exclude from the tar file"
    print "   -s[colon-separated list of strings] to exclude any library that matches any of the strings"
    print "   -t[name] tar file to pack the libraries into (without name defaults to <binary_name>_pack.tar.gz)"
    print
    print " examples:"
    print "   ",sys.argv[0],"/ilc/Marlin/HEAD/bin/Marlin"
    print "   ",sys.argv[0],"/ilc/Marlin/HEAD/bin/Marlin -t"
    print "   ",sys.argv[0],"/ilc/Marlin/HEAD/bin/Marlin -t myMarlinPack.tgz -e $MARLIN_DLL"
    print "   ",sys.argv[0],"/ilc/Marlin/HEAD/bin/Marlin -t -s root/5.08.00:CLHEP/2.0.2.2"
    print "   ",sys.argv[0],"/ilc/Marlin/HEAD/bin/Marlin -i /foo/bar/libx.so:/foo/bar/liby.so"
    print
    sys.exit(1)

def abort(msg):
    print "\n Error:", msg
    sys.exit(1)

#=============================================================================

# program called with no arguments
if( len(sys.argv) == 1 ):
    printUsage()

# extract binary file from sys.argv
bin_file = sys.argv[1]

# check if binary file exists
if( not os.path.exists( bin_file )):
    abort( bin_file+" does not exist!!" )

# shift command name and binary file out of argument list
argl = sys.argv[2:]

# split arguments by ' -' instead of whitespaces
argl=str.join(' ', argl).split(' -')

# remove empty elements
argl = [ i for i in argl if i ]

# parse the arguments
for arg in argl:
    if( not arg[0] in valid_opts ):
        abort( "Invalid Option [-"+arg[0]+"]!!" )
    args[arg[0]] = arg[1:].strip()

# check extension for tar file
if( args.has_key( "t" )):
    if( args["t"][-4:] != ".tgz" and args["t"][-7:] != ".tar.gz" ):
        if( args["t"][-4:] == ".tar" ):
            # in case only .tar is specified add the .gz extension
            args["t"]=args["t"]+".gz"
        else:
            if( args["t"] ):
                args["t"]=args["t"]+".tar.gz"
            else:
                # create a default tar name
                args["t"]=os.path.basename(bin_file)+"_pack.tar.gz"

    # check if tar file already exists
    if( os.path.exists( args["t"] )):
        abort( args["t"]+" already exists, please remove it first!" )

# check list of strings to exclude
if( args.has_key( "s" )):
    s=args["s"].split(':')
    # remove empty elements
    args["s"] = [ i for i in s if i ]
    
# list of all libraries
libs = []

# list of libraries not found
libs_notfound = []

# get libraries from binary file
# FIXME implement otool for Mac
lddout = commands.getstatusoutput( "ldd " + bin_file )
if( lddout[0] != 0 ):
    abort( bin_file+" is not a valid binary file!!" )

# parse output of ldd
for l in lddout[1].split('\n'):
    if( l.find("not found") != -1 and not l.split()[0] in libs_notfound ):
        libs_notfound.append( l.split()[0] )
    if( l.find("/usr/lib/") == -1 and l.find(" /lib/") == -1 and l.find("not found") == -1 ):
        inc_lib=True
        if( args.has_key( "s" )):
            for s in args["s"]:
                if( l.find( s ) != -1 ):
                    inc_lib=False
        if( inc_lib ):
            libs.append( l.split( " => " )[1].split()[0] )

# get libraries from $MARLIN_DLL
marlin_dll = os.getenv( "MARLIN_DLL", "" )

if( marlin_dll ):
    # split by ':'
    marlin_dll=marlin_dll.split(':')
    # remove empty elements
    marlin_dll = [ i for i in marlin_dll if i ]
    # strip elements
    marlin_dll = [ i.strip() for i in marlin_dll ]

    for l in marlin_dll:
        if( os.path.exists( l )):
            if( not l in libs ):
                libs.append( l )
                # if library was previously marked as not found remove it
                if( os.path.basename(l) in libs_notfound ):
                    libs_notfound.remove( os.path.basename(l) )
        else:
            print "WARNING: library from MARLIN_DLL not found:",l

# include libraries defined in option -i
if( args.has_key( "i" )):
    # split by ':'
    incl_libs = args["i"].split(':')
    # remove empty elements
    incl_libs = [ i for i in incl_libs if i ]
    # strip elements
    incl_libs = [ i.strip() for i in incl_libs ]
    for l in incl_libs:
        if( os.path.exists( l )):
            if( not l in libs ):
                libs.append( l )
                # if library was previously marked as not found remove it
                if( os.path.basename(l) in libs_notfound ):
                    libs_notfound.remove( os.path.basename(l) )
        else:
            print "WARNING: library specified with -i option not found: ", l

# exclude libraries defined in option -e
if( args.has_key( "e" )):
    # split by ':'
    excl_libs = args["e"].split(':')
    # remove empty elements
    excl_libs = [ i for i in excl_libs if i ]
    # strip elements
    excl_libs = [ i.strip() for i in excl_libs ]
    for l in excl_libs:
        if( l in libs ):
            libs.remove( l )
        else:
            print "WARNING: library specified with -e option not found: ", l

print "\nList of files to pack into the tar file:"
print bin_file
for l in libs: print l
if( len(libs_notfound) != 0 ):
    print "WARNING: libraries not found:"
    for l in libs_notfound: print l
    print "you can add libraries manually with -i option!"

# create tar file
if( args.has_key( "t" )):
    print "\ncreating tar file", args["t"]+"..."
    pack_dir = args["t"][:args["t"].find('.')]
    #pack_dir = os.path.basename(bin_file)+"_pack"
    if( not os.path.exists( pack_dir )):
        os.makedirs( pack_dir )
    else:
        abort( pack_dir+" already exists, please remove it first!" )
    # create symlink for each lib
    for l in libs:
        try:
            os.symlink( l, pack_dir+'/'+os.path.basename(l) )
        except:
            abort( "failed trying to create a symlink to "+l )
    try:
        os.symlink( os.path.abspath(bin_file), pack_dir+'/'+os.path.basename(bin_file) )
    except:
        abort( "failed trying to create a symlink to "+os.path.abspath(bin_file) )
    # create tar with -h option (dereference links)
    out=commands.getstatusoutput( "tar -chzf "+args["t"]+" "+pack_dir )
    if( out[0] != 0 ):
        print "\n"+out[1]+"\n"
        abort( "there was an error creating "+args["t"] )
    else:
        print "removing temporary directory", pack_dir+"..."
        try:
            shutil.rmtree( pack_dir )
        except:
            abort( "there was an error trying to remove "+pack_dir )
    print "done."
