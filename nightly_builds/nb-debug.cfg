#################################################################
# Configuration file for iLCSoft nightly builds @ DESY
#################################################################

# ILCSoft( "install path for ILC software")
ilcsoft = ILCSoft("/scratch/nbuilds/"+date_iso8601+"/"+config_file_basename)

# mail adresses for sending nightly build output
mail_addresses=[ "user1@desy.de", "user2@desy.de" ]

#ilcsoft.patch = [ "004-mokka-07-02-fix-dcap" ]

# set to an ilcsoft release
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
ilcPath = "/afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/"
if ilcsoft.os.isSL(4):
    ilcPath = "/afs/desy.de/project/ilcsoft/sw/i386_gcc34_sl4/"


#----- global variables -----------------------------------------

# download settings
#-----------------------------------------------
ilcsoft.downloadType = "svn-desy"
#-----------------------------------------------

# additional make options
#-----------------------------------------------
#ilcsoft.envcmake["BUILD_32BIT_COMPATIBLE"]="ON"
ilcsoft.envcmake['CMAKE_BUILD_TYPE']='Debug'
ilcsoft.envcmake['INSTALL_DOC']='OFF'
ilcsoft.env["MAKEOPTS"]="-j4"
#ilcsoft.env["MAKEFLAGS"]="-j4 VERBOSE=1"
#ilcsoft.envcmake["CMAKE_VERBOSE_MAKEFILE"]=1
#-----------------------------------------------

# enable tests (ctest)
ilcsoft.makeTests=True

# choose compiler
#-----------------------------------------------
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="g77"
#ilcsoft.env["CXX"]="g++ -m32"
#ilcsoft.env["CC"]="gcc -m32"
#ilcsoft.env["FC"]="g77 -m32"
if not ilcsoft.os.isSL(4):
    ilcsoft.env["FC"]="gfortran"
#-----------------------------------------------

# compiler flags
#-----------------------------------------------
ilcsoft.env["CXXFLAGS"]="-m32"
ilcsoft.env["CFLAGS"]="-m32"
#ilcsoft.env["FFLAGS"]="-m32"
ilcsoft.env["FFLAGS"]="-m32"
ilcsoft.env["LDFLAGS"]="-m32"
#ilcsoft.env["LDFLAGS"]="-m32 -Wl,--no-undefined"
#ilcsoft.envcmake["CMAKE_C_FLAGS"]= "-m32"
#ilcsoft.envcmake["CMAKE_CXX_FLAGS"]= "-m32"
#ilcsoft.envcmake["CMAKE_Fortran_FLAGS"]= "-m32"
#-----------------------------------------------

# additional linker flags
#-----------------------------------------------
#ilcsoft.envcmake["CMAKE_EXE_LINKER_FLAGS"]="-m32"
#ilcsoft.envcmake["CMAKE_SHARED_LINKER_FLAGS"]="-m32"
#ilcsoft.envcmake["CMAKE_MODULE_LINKER_FLAGS"]="-m32"
#-----------------------------------------------

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/blah/blah"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/blub/blub"
#ilcsoft.envcmake["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3;/blah/blah"
#ilcsoft.envcmake["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3;/blub/blub"
#-----------------------------------------------

#----------------------------------------------------------------

# Marlin + plugins
ilcsoft.install( Marlin( "HEAD" ))
#ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1 # defined in nb-release.cfg

ilcsoft.install( MarlinUtil( "HEAD" ))
ilcsoft.install( Overlay( "HEAD" ))
ilcsoft.install( CEDViewer( "HEAD" ))
ilcsoft.install( MarlinReco( "HEAD" ))
ilcsoft.install( LCFIVertex( "HEAD" ))
ilcsoft.install( PandoraPFANew( "HEAD" ))
ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.install( PandoraAnalysis( "HEAD" ))
ilcsoft.install( MarlinPandora( "HEAD" ))
ilcsoft.install( MarlinTPC( "HEAD" ))
ilcsoft.install( Eutelescope( "HEAD" ))
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'

#ilcsoft.install( MarlinPKG( "FastJetClustering", "HEAD" ))
#FastJetClustering = ilcsoft.module( "FastJetClustering" )
#FastJetClustering.download.root = "marlinreco"
#FastJetClustering.addDependency( ['FastJet'] )
#FastJetClustering.env["FASTJETCLUSTERING"]=FastJetClustering.installPath
#FastJetClustering.envpath["LD_LIBRARY_PATH"].append( "$FASTJETCLUSTERING/lib" )

ilcsoft.install ( FastJetClustering ( "HEAD" ) )

ilcsoft.install( MarlinPKG( "MarlinFastJet", "HEAD" ))
ilcsoft.module("MarlinFastJet").download.root="marlinreco"
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )


ilcsoft.install( MarlinTrk( "HEAD" ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", "HEAD" ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk'] )

ilcsoft.install( MarlinPKG( "Clupatra", "HEAD" ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", "HEAD" ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinPKG( "LCFIPlus", "HEAD" ))
ilcsoft.module("LCFIPlus").download.root="marlinreco"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", "HEAD" ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


# ilcsoft core packages
ilcsoft.install( ILCUTIL( "HEAD" ))
ilcsoft.install( KalTest( "HEAD" ))
ilcsoft.module("KalTest").envcmake['BUILD_EXAMPLES']='ON'
ilcsoft.install( KalDet( "HEAD" ))

ilcsoft.install( Garlic( "HEAD" ))
ilcsoft.install( Druid( "HEAD" ))
ilcsoft.install( CED( "HEAD" ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'
ilcsoft.install( LCIO( "HEAD" ))
lcio=ilcsoft.module("LCIO")
#lcio.envcmake["BUILD_WITH_DCAP"]="ON"
lcio.envcmake["BUILD_LCIO_EXAMPLES"]="ON"
lcio.envcmake["BUILD_ROOTDICT"]="ON"
lcio.envcmake["BUILD_F77_TESTJOBS"]="ON"

ilcsoft.install( GEAR( "HEAD" ))
ilcsoft.module("GEAR").envcmake['BUILD_TGEO']='ON'
ilcsoft.install( RAIDA( "HEAD" ))
ilcsoft.install( LCCD( "HEAD" ))
ilcsoft.install( CondDBMySQL( "HEAD" ))

#----- configs ------------------------------------------------------
#ilcsoft.link( ConfigPKG( "StandardConfig", "/scratch/engels/nbuilds/StandardConfig/HEAD" ) )
ilcsoft.install( ConfigPKG( "StandardConfig", "HEAD" ))
stdconf = ilcsoft.module( "StandardConfig")
stdconf.download.root = "marlinreco"
stdconf.env["STANDARDCONFIG"]=stdconf.installPath

ilcsoft.install( ConfigPKG( "MokkaDBConfig", "HEAD" ))
mokkadbconf = ilcsoft.module( "MokkaDBConfig")
mokkadbconf.download.root = "ilctools"
mokkadbconf.envorder=["MOKKADBCONFIG"]
mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )

ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", "HEAD" ))
lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
lcfinets.download.root = "tagnet"
lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath
# -------------------------------------------------------------------

if not arch == 'gcc41_64bit': # if not cross-compiling 32bit on 64bit
    
    ilcsoft.install( Mokka( "HEAD" ))
    #ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1
    #ilcsoft.install( Mokka( "mokka-07-00" ))
    #ilcsoft.install( Mokka( "mokka-06-07-patch01" ))
    #ilcsoft.module("Mokka").download.username="anoncvs"
    #ilcsoft.module("Mokka").env["CPPVERBOSE"]=1
    #ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1
    ilcsoft.use( Geant4 ( ilcPath + "geant4/9.3.p02" ))
    # if you don't have an env.sh script in the 'use/link' directory specified above for
    # configuring geant4 use the following line (full path!) for defining another location:
    ilcsoft.module( "Geant4" ).env["G4ENV_INIT"] = ilcPath + "geant4/env_9.3.p02.sh"


ilcsoft.use( QT( ilcPath + "QT/4.2.2" ))
ilcsoft.use( FastJet ( ilcPath + "FastJet/2.4.2" ) )
ilcsoft.use( CLHEP( ilcPath + "CLHEP/2.0.4.5" ))
ilcsoft.use( GSL( ilcPath + "gsl/1.14" ))
ilcsoft.use( CERNLIB( ilcPath + "cernlib/2006" ))
ilcsoft.use( MySQL( ilcPath + "mysql/5.0.45" ))
ilcsoft.use( CMake( ilcPath + "CMake/2.8.3" ))
if not 'Ubuntu' in ilcsoft.os.ver:
    ilcsoft.use( ROOT( ilcPath + "root/5.28.00" ))
else:
    ilcsoft.install( ROOT( "5.28.00" ))

# SimTools Packages
#ilcsoft.install( lcbase( "v01-03") )
#ilcsoft.install( Leda( "v01-02") )
#ilcsoft.install( Uranus( "v01-03") )
#ilcsoft.install( Satellites( "v01-04") )
#ilcsoft.install( lclib( "v01-04") )
#ilcsoft.install( jsf( "v01-04") )
#if ilcsoft.os.isSL(4):
#    ilcsoft.module( "jsf" ).env["GFORTRANLIBDIR"]="-L/usr/lib/gcc/i386-redhat-linux5E/4.1.2"
#ilcsoft.install( Jupiter( "v01-03-01") )
#ilcsoft.install( physsim( "v01-04") )


# Java
#ilcsoft.use( Java( ilcPath + "java/1.6.0" ))

# end of configuration file

