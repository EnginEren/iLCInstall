#################################################################
# Configuration file for iLCSoft nightly builds @ DESY
#################################################################


# ILCSoft( "install path for ILC software")
ilcsoft = ILCSoft("/scratch/aplin/newTracking")

ilcPath = "/afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5/"

#----- global variables -----------------------------------------

# download settings
#-----------------------------------------------
ilcsoft.downloadType = "svn-desy"
#-----------------------------------------------

# additional make options
#-----------------------------------------------
ilcsoft.env["MAKEOPTS"]="-j4"
ilcsoft.envcmake['CMAKE_BUILD_TYPE']='Debug'
ilcsoft.envcmake['INSTALL_DOC']='OFF'
#ilcsoft.envcmake["CMAKE_VERBOSE_MAKEFILE"]=1
#-----------------------------------------------

# enable tests (ctest)
ilcsoft.makeTests=True

# choose compilers
#-----------------------------------------------
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"
ilcsoft.env["FC"]="gfortran"
#-----------------------------------------------

# compiler flags
#-----------------------------------------------
#ilcsoft.env["CXXFLAGS"]="-m32"
#ilcsoft.env["CFLAGS"]="-m32"
#ilcsoft.env["FFLAGS"]="-m32"
#ilcsoft.env["LDFLAGS"]="-m32"
ilcsoft.env["LDFLAGS"]="-Wl,--no-undefined"
#ilcsoft.env["FFLAGS"]="-fbounds-check"
#-----------------------------------------------

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/blah/blah"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/blub/blub"
#-----------------------------------------------

#ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]="/opt/gcc-4.4.0/lib64/"
#----------------------------------------------------------------

# Marlin + plugins
ilcsoft.install( Marlin( "HEAD" ))
#ilcsoft.module("Marlin").envcmake["MARLIN_GUI"] = 1

ilcsoft.install( MarlinUtil( "HEAD" ))
ilcsoft.install( Overlay( "HEAD" ))
ilcsoft.install( CEDViewer( "HEAD" ))
ilcsoft.install( MarlinReco( "HEAD" ))
#ilcsoft.install( PandoraPFA( "HEAD" ))
ilcsoft.install( PandoraPFANew( "HEAD" ))
ilcsoft.install( PandoraAnalysis( "HEAD" ))
ilcsoft.install( MarlinPandora( "HEAD" ))
ilcsoft.install( LCFIVertex( "HEAD" ))
ilcsoft.install( MarlinTPC( "HEAD" ))
#ilcsoft.install( Eutelescope( "HEAD" )) # FIXME
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'
#ilcsoft.install( SiliconDigi( "HEAD" ))
#ilcsoft.install( CKFit( "HEAD" ))


ilcsoft.install( FastJetClustering( "HEAD" ))

#ilcsoft.install( MarlinPKG( "MarlinTrk", "HEAD" ))
#ilcsoft.module("MarlinTrk").download.root="marlinreco"
#ilcsoft.module("MarlinTrk").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet'] )


# ilcsoft core packages
ilcsoft.install( ILCUTIL( "HEAD" ))
ilcsoft.install( KalTest( "HEAD" ))
ilcsoft.module("KalTest").envcmake['BUILD_EXAMPLES']='ON'
ilcsoft.install( KalDet( "HEAD" ))
ilcsoft.install( Garlic( "HEAD" ))
ilcsoft.install( Druid( "HEAD" ))
ilcsoft.install( CED( "HEAD" ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'

ilcsoft.install( LCIO( "HEAD" ))
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_ROOTDICT"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_LCIO_EXAMPLES"]="ON"
ilcsoft.module("LCIO").envcmake["BUILD_F77_TESTJOBS"]="ON"
ilcsoft.install( GEAR( "HEAD" ))
ilcsoft.module("GEAR").envcmake['BUILD_TGEO']='ON'
ilcsoft.install( RAIDA( "HEAD" ))
ilcsoft.install( LCCD( "HEAD" ))

#ilcsoft.install( CMakeModules( "HEAD" ))


#ilcsoft.install( dcap( "1.9.5-5" ))

#----- configs ------------------------------------------------------
#ilcsoft.link( ConfigPKG( "StandardConfig", "/scratch/engels/nbuilds/StandardConfig/HEAD" ) )
ilcsoft.install( ConfigPKG( "StandardConfig", "HEAD" ))
stdconf = ilcsoft.module( "StandardConfig")
stdconf.download.root = "marlinreco"
stdconf.env["STANDARDCONFIG"]=stdconf.installPath

ilcsoft.install( ConfigPKG( "MokkaDBConfig", "HEAD" ))
mokkadbconf = ilcsoft.module( "MokkaDBConfig")
mokkadbconf.download.root = "ilctools"
mokkadbconf.envorder=["MOKKADBCONFIG"]
mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )

ilcsoft.install( ConfigPKG( "LCFI_MokkaBasedNets", "HEAD" ))
lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
lcfinets.download.root = "tagnet"
lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath
# -------------------------------------------------------------------

ilcsoft.install( Mokka( "HEAD" ))
ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1
#ilcsoft.install( Mokka( "mokka-07-00" ))
#ilcsoft.install( Mokka( "mokka-06-07-patch01" ))
#ilcsoft.module("Mokka").download.username="anoncvs"
#ilcsoft.module("Mokka").env["CPPVERBOSE"]=1
ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1

ilcsoft.install( CondDBMySQL( "HEAD" ))

ilcsoft.use( Geant4 ( ilcPath + "geant4/9.3.p02" ))
ilcsoft.module( "Geant4" ).env["G4ENV_INIT"] = ilcPath + "geant4/env_9.3.p02.sh"

#ilcsoft.install( QT( "4.2.2" ))
#ilcsoft.install( QT( "4.6.3" ))
#ilcsoft.install( CLHEP( "2.0.4.5" ))
#ilcsoft.install( GSL( "1.12" ))
#ilcsoft.install( CMake( "2.8.3" ))
#ilcsoft.install ( FastJet ( "2.4.2" ) )

ilcsoft.use( ROOT( ilcPath + "root/5.28.00" ))
ilcsoft.use( FastJet( ilcPath + "FastJet/2.4.2" ))
ilcsoft.use( CLHEP( ilcPath + "CLHEP/2.0.4.5" ))
ilcsoft.use( GSL( ilcPath + "gsl/1.8" ))
ilcsoft.use( QT( ilcPath + "QT/4.2.2" ))
ilcsoft.use( CERNLIB( ilcPath + "cernlib/2006" ))
ilcsoft.use( MySQL( ilcPath + "mysql/5.0.45" ))
ilcsoft.use( CMake( ilcPath + "CMake/2.8.5" ))

# Java
#ilcsoft.use( Java( ilcPath + "java/1.6.0" ))

# end of configuration file

