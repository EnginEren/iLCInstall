##############################################################################
#
# Configuration file for installing ILC Software release v01-14
#
# This cfg file assumes the base-level tools from release_v01-14-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_v01-14-base.cfg or alternatively
# install all software with release_v01-14-scratch.cfg (please check
# release_v01-14-base.cfg for more details)
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions-HEAD.py" )
execfile( versions_file )

# installation directory
if not 'ilcsoft_install_dir' in dir():
    if not 'ilcsoft_install_prefix' in dir():
        # default install prefix
        ilcsoft_install_prefix = "$HOME/ilcsoft"

    
ilcsoft_install_dir = os.path.join( ilcsoft_install_prefix, ilcsoft_release )

ilcsoft = ILCSoft( ilcsoft_install_dir )


# python variable for referring the ILC Home directory
# used to link or use already installed packages (SL5)
# --- set in release-versions.py ---
#ilcPath = "/afs/desy.de/group/it/ilcsoft/"
#ilcPath = '/afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/'
if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j4"
#ilcsoft.env["CXX"]="g++"
#ilcsoft.env["CC"]="gcc"
#ilcsoft.env["FC"]="gfortran"
#if( ilcsoft.os.isSL(4) ):
#    ilcsoft.env["FC"]="g77"

#
ilcsoft.envcmake['CMAKE_CXX_FLAGS']= CMAKE_CXX_FLAGS
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'
#

if( len( Fortran_lib_path ) > 0 ):
  ilcsoft.envcmake["FORTRAN_LIBRARY_SEARCH_PATH"]=Fortran_lib_path


# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "svn"
#ilcsoft.downloadType = "svn-desy"

# additional system pathes for FIND_LIBRARY, FIND_PATH
#-----------------------------------------------
#ilcsoft.env["CMAKE_LIBRARY_PATH"]="/usr/lib/gcc/i386-redhat-linux/3.4.3:/another/path/lib"
#ilcsoft.env["CMAKE_INCLUDE_PATH"]="/usr/include/c++/3.4.3:/another/path/include"
#-----------------------------------------------


###########################################################


ilcsoft.use( MySQL("/cvmfs/clicdp.cern.ch/software/MySQL/5.7.13/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( FastJet( "/cvmfs/clicdp.cern.ch/software/FastJet/3.2.0/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( XercesC( "/cvmfs/clicdp.cern.ch/software/Xerces-C/3.1.3/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( Geant4( "/cvmfs/clicdp.cern.ch/software/Geant4/10.01.p03/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( ROOT( "/cvmfs/clicdp.cern.ch/software/ROOT/6.06.04/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( CLHEP( "/cvmfs/clicdp.cern.ch/software/CLHEP/2.2.0.4/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( GSL( "/cvmfs/clicdp.cern.ch/software/GSL/2.1/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( LCIO( "/cvmfs/clicdp.cern.ch/software/LCIO/2.7.1/x86_64-slc6-gcc48-opt" ))
ilcsoft.use( Boost( "/cvmfs/clicdp.cern.ch/software/Boost/1.61.0/x86_64-slc6-gcc48-opt" ))

ilcsoft.install( ILCUTIL( ILCUTIL_version ))
ilcsoft.install( CondDBMySQL( CondDBMySQL_version ))

ilcsoft.install( CED( CED_version ))
ilcsoft.module("CED").envcmake['CED_SERVER']='ON'


ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"]='OFF'

ilcsoft.install( MarlinPKG( "MarlinDD4hep", MarlinDD4hep_version ))
ilcsoft.module("MarlinDD4hep").download.root="marlin"
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'Root'] )

ilcsoft.install( MarlinPKG( "DDMarlinPandora", DDMarlinPandora_version ))
ilcsoft.module("DDMarlinPandora").download.root="marlinreco"
ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'MarlinUtil', 'DD4hep', 'ROOT', 'PandoraPFANew'] )


ilcsoft.install( MarlinUtil( MarlinUtil_version ))


ilcsoft.install( Mokka( Mokka_version ))
ilcsoft.module("Mokka").envcmake["WITH_GEANT4_UIVIS"]='ON'
#ilcsoft.module("Mokka").env["MOKKA_DEBUG"]=1
#ilcsoft.module("Mokka").env["MOKKA_PACK_LIBS"]=1 # FIXME: CAUSES TOO MUCH LIB DEPENDENCIES .... TO BE SOLVED !!

#----------  standard reco packages

ilcsoft.install( MarlinReco( MarlinReco_version )) 

ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))

ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["ROOT_DIR"]='${ROOTSYS}/etc/cmake'


ilcsoft.install( MarlinPandora( MarlinPandora_version ))

ilcsoft.install( LCFIVertex( LCFIVertex_version ))
ilcsoft.module( "LCFIVertex" ).envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( CEDViewer( CEDViewer_version )) 

ilcsoft.install( Overlay( Overlay_version ))  

ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").download.root="marlinreco"
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").download.root="marlinreco"
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").download.root="marlinreco"
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").download.root="marlinreco"
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "ILDPerformance", ILDPerformance_version ))
ilcsoft.module("ILDPerformance").download.root="marlinreco"
ilcsoft.module("ILDPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

#-- for convenience also include the HEAD version of ILDconfig
ilcsoft.install( ConfigPKG( "ILDConfig", ILDConfig_version ))
ilcsoft.module("ILDConfig").download.root="marlinreco"
ilcsoft.module("ILDConfig").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").download.root="marlinreco"
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "Physsim", Physsim_version ))
ilcsoft.module("Physsim").download.root="physsim"
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "FCalClusterer", FCalClusterer_version ))
ilcsoft.module("FCalClusterer").download.root="FCAL/Software"
ilcsoft.module("FCalClusterer").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.root="marlinreco"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").download.root="marlinreco"
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )



#---------test beam packages 

#ilcsoft.install( Eutelescope( Eutelescope_version ))
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'


ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.install( MarlinTPC( MarlinTPC_version ))

ilcsoft.install( BBQ( BBQ_version ))

#fg: needs porting to ROOT6 (dictionary!)
#ilcsoft.install( Druid( Druid_version ))

ilcsoft.install( Garlic( Garlic_version ))



ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))

ilcsoft.install( GBL ( GBL_version ) )

#------ slic et al
#ilcsoft.install( HepPDT( HepPDT_version ))
#ilcsoft.install( GDML( GDML_version ))
#ilcsoft.install( LCDD( LCDD_version ))
#ilcsoft.install( SLIC( SLIC_version ))
#ilcsoft.install( SlicPandora( SlicPandora_version ))
#-----------------

# DD4hep
ilcsoft.install( DD4hep( DD4hep_version )) 
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path
if( use_cpp11 ):
    ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_CXX11"] = 'ON'


ilcsoft.install( lcgeo( lcgeo_version )) 

ilcsoft.install( aidaTT( aidaTT_version )) 

ilcsoft.install( DDKalTest( DDKalTest_version ))

ilcsoft.install( DD4hepExamples ( DD4hepExamples_version ))

####################################################################
#
# the following tools are installed in afs:
#
# - for SL5 (32bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/i386_gcc41_sl5/
#
# - for SL5 (64bit) under:
#
#     /afs/desy.de/project/ilcsoft/sw/x86_64_gcc41_sl5
#
# they can be linked from there or need to be installed on your system
#
####################################################################


#----- configs ------------------------------------------------------
#ilcsoft.link( ConfigPKG( "StandardConfig", ilcPath + "StandardConfig/" + StandardConfig_version ) )
#stdconf = ilcsoft.module( "StandardConfig")
#stdconf.env["STANDARDCONFIG"]=stdconf.installPath
#
#ilcsoft.link( ConfigPKG( "MokkaDBConfig", ilcPath + "MokkaDBConfig/" + MokkaDBConfig_version ) ) 
#mokkadbconf = ilcsoft.module( "MokkaDBConfig")
#mokkadbconf.download.root = "ilctools"
#mokkadbconf.envorder=["MOKKADBCONFIG"]
#mokkadbconf.env["MOKKADBCONFIG"]=mokkadbconf.installPath
#mokkadbconf.env["MOKKA_DUMP_FILE"]="$MOKKADBCONFIG/mokka-dbdump.sql.tgz"
#mokkadbconf.envpath["PATH"].append( "$MOKKADBCONFIG/scripts" )
#
#ilcsoft.link( ConfigPKG( "LCFI_MokkaBasedNets", ilcPath + "LCFI_MokkaBasedNets/" + LCFI_MokkaBasedNets_version ) )
#lcfinets=ilcsoft.module( "LCFI_MokkaBasedNets" )
#lcfinets.download.root = "tagnet"
#lcfinets.env["LCFIMOKKABASEDNETS"]=lcfinets.installPath
#--------------------------------------------------------------------


#ilcsoft.link( GEAR( ilcPath + "gear/" + GEAR_version ))
ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'


ilcsoft.install( QT( QT_version ))


# cernlib
if 'CERNLIB_path' in dir():
    ilcsoft.link( CERNLIB( CERNLIB_path ))

# geant4
#if 'Geant4_path' in dir():
#    ilcsoft.use( Geant4 ( Geant4_path ))
#    if 'G4ENV_INIT_path' in dir():
#        ilcsoft.module("Geant4").env["G4ENV_INIT"] = G4ENV_INIT_path

# mysql
#if 'MySQL_path' in dir():
#    ilcsoft.link( MySQL( MySQL_path ))

# Java
#if 'Java_path' in dir():
#    ilcsoft.link( Java( Java_path ))

# cmake
#ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))


# end of configuration file

